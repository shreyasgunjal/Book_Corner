@model IEnumerable<MVC_Project.Models.Author>

@{
    ViewBag.Title = "Index";
}
<style>
    .bg-dark {
        --bs-bg-opacity: 1;
        background-color: rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)) !important;
        margin-top: 10px;
    }
</style>

<h2 class="d-inline-block">Index</h2>

<div class="d-flex justify-content-end align-items-center mt-2 float-end">
    <div class="dropdown me-3">
        <div class="dropdown d-inline-block ">

            <button class="btn btn-secondary dropdown-toggle bg-dark" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                Filters
            </button>&nbsp;
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <li><a id="filterByIDLink" class="dropdown-item" href="#" onclick="filterByID(event)">Get All Authors</a></li>
                <li><a id="filterByIDLink" class="dropdown-item" href="#" onclick="setFilter('id', event)">Search Authors By ID</a></li>
                <li><a id="filterByFirstNameLink" class="dropdown-item" href="#" onclick="setFilter('fname', event)">Search Authors By First Name</a></li>
                <li><a id="filterByLastNameLink" class="dropdown-item" href="#" onclick="setFilter('lname', event)">Search Authors By Last Name</a></li>
                <li><a id="filterByPhoneNoLink" class="dropdown-item" href="#" onclick="setFilter('phone', event)">Search Authors By Phone Number</a></li>
                <li><a id="filterByZipLink" class="dropdown-item" href="#" onclick="setFilter('zip', event)">Search Authors By Zip</a></li>
                <li><a id="filterByCityLink" class="dropdown-item" href="#" onclick="setFilter('city', event)">Search Authors By City</a></li>
                <li><a id="filterByStateLink" class="dropdown-item" href="#" onclick="setFilter('state', event)">Search Authors By State</a></li>
            </ul>

        </div>
        <div class="dropdown float-end">
            <div id="searchContainer" style="display: none; margin-top: 10px;">
                <input id="searchBox" type="text" name="searchValue" placeholder="Search" class="form-control" style="width: 200px; display: inline-block;" />
                <a href="#" id="searchLink" class="btn btn-primary" style="display: inline-block;" onclick="submitSearch(event)">Search</a>
            </div>


        </div>
    </div>
</div>

@*<form class="float-end mx-3" id="searchForm" method="get" action="@Url.Action("Index", "AuthorsMVC")" onsubmit="return handleFormSubmit(event)">
    <input id="searchBox" type="text" name="searchValue" value="@ViewBag.SelectedValue" placeholder="Search" class="form-control" style="width: 200px; display: inline-block;" />
</form>*@
<p>
    @Html.Raw("<a href='" + Url.Action("Create") + "' class='btn btn-dark'><i class='fas fa-plus'></i> Add New Author </a>")
</p>
@*<p>
    @Html.Raw("<a href='" + Url.Action("Create") + "' class='btn btn-dark'><i class='fas fa-plus'></i> Add New Author </a>")
</p>*@
@*<p>
            @Html.ActionLink("Create New", "Create")
    </p>*@
@*<p>
        @Html.ActionLink(
                @Html.Raw("Add new Author").ToString(),
                "Create",
                null,
                new { @class = "btn btn-success btn-lg" }
            )
    </p>*@

@*<p>
        @Html.ActionLink(
        @Html.Raw("<i class=\"fas fa-plus\"></i> Add new Author").ToString(),
        "Create",
        null,
        new { @class = "btn btn-success btn-lg" }
    )
    </p>*@



<h2>Authors</h2>
@*<div class="container">*@ 
<div class="row mt-4">
    @*<div class="row">*@
        @foreach (var author in Model)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-header">
                        <strong>Author ID : </strong>@author.au_id
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">First Name : @author.au_fname</h5>
                        <p class="card-text">
                            <strong>Last Name: </strong> @author.au_lname<br />
                            <strong>Phone Number : </strong> @author.phone<br />
                            <strong>Zip : </strong> @author.zip<br />
                            <strong>City : </strong> @author.city<br />
                            <strong>State : </strong> @author.state<br />
                        </p>
                    </div>
                    <div class="card-footer text-muted">
                        <!-- Optional footer content, e.g., links -->
                        <a href="@Url.Action("Edit", new { id = author.au_id})" class="btn btn-primary">Edit</a>
                        <a href="@Url.Action("Details", new { id = author.au_id})" class="btn btn-info">Details</a>
                        <a href="@Url.Action("Delete", new { id = author.au_id })" class="btn btn-danger">Delete</a>
                    </div>
                </div>
            </div>
        }
    </div>


@section Scripts {
    <script>
        function updateLinkWithFilter(filterType) {
            var searchValue = document.getElementById('searchBox').value;
            var url = '@Url.Action("Index", "AuthorsMVC")' + '?searchType=' + filterType + '&searchValue=' + encodeURIComponent(searchValue);
            return url;
        }

        function handleFormSubmit(event) {
            event.preventDefault(); // Prevent form submission
            var searchValue = document.getElementById('searchBox').value;
            var filterType = document.getElementById('filterType').value; // Assuming you use a hidden input to store the filter type
            var url = updateLinkWithFilter(filterType);
            window.location.href = url; // Redirect to the URL
            return false; // Prevent default form submission
        }

        function filterByID(event) {
            event.preventDefault();
            var link = document.getElementById('filterByIDLink');
            //link.href = updateLinkWithFilter('authorID');
            link.href = updateLinkWithFilter('id');
            window.location.href = link.href;
        }

        function filterByFirstName(event) {
            event.preventDefault();
            var link = document.getElementById('filterByFirstNameLink');
            link.href = updateLinkWithFilter('fname');
            window.location.href = link.href;
        }

        function filterByLastName(event) {
            event.preventDefault();
            var link = document.getElementById('filterByLastNameLink');
            link.href = updateLinkWithFilter('lname');
            window.location.href = link.href;
        }

        function filterByPhoneNo(event) {
            event.preventDefault();
            var link = document.getElementById('filterByPhoneNoLink');
            link.href = updateLinkWithFilter('phone');
            window.location.href = link.href;
        }

        function filterByZip(event) {
            event.preventDefault();
            var link = document.getElementById('filterByZipLink');
            link.href = updateLinkWithFilter('zip');
            window.location.href = link.href;
        }

        function filterByCity(event) {
            event.preventDefault();
            var link = document.getElementById('filterByCityLink');
            link.href = updateLinkWithFilter('city');
            window.location.href = link.href;
        }


        function filterByState(event) {
            event.preventDefault();
            var link = document.getElementById('filterByStateLink');
            link.href = updateLinkWithFilter('state');
            window.location.href = link.href;
        }

        function getAllAuthors(event) {
            event.preventDefault();
            var baseUrl = '/AuthorsMVC'; // or whatever the base URL of your MVC controller is
            window.location.href = baseUrl;
        }
        let currentFilter = ''; // Variable to store the currently selected filter

        // Create a mapping from filter types to more readable names
        const filterTypeMapping = {
            id: "ID",
            fname: "First Name",
            lname: "Last Name",
            phone: "Phone Number",
            zip: "Zip",
            city: "City",
            state: "State"
        };

        // Function to set the selected filter and show the search box
        function setFilter(filterType, event) {
            event.preventDefault(); // Prevent default anchor behavior

            // Store the selected filter type
            currentFilter = filterType;

            // Show the search box container
            const searchContainer = document.getElementById('searchContainer');
            searchContainer.style.display = 'block';

            // Get the human-readable name from the mapping
            const humanReadableName = filterTypeMapping[filterType] || filterType;

            // Update the search box placeholder based on the selected filter type
            const searchBox = document.getElementById('searchBox');

            // Set the correct placeholder
            searchBox.placeholder = `Search by ${humanReadableName}`;
        }
        //// Function to set the selected filter and show the search box
        //function setFilter(filterType, event) {
        //    event.preventDefault(); // Prevent default anchor behavior

        //    // Store the selected filter type
        //    currentFilter = filterType;

        //    // Show the search box container
        //    const searchContainer = document.getElementById('searchContainer');
        //    searchContainer.style.display = 'block';

        //    // Update the search box placeholder based on the selected filter type
        //    const searchBox = document.getElementById('searchBox');
        //    searchBox.placeholder = `Search by ${filterType.charAt(0).toUpperCase() + filterType.slice(1)}`;
        //    //const humanReadableName = filterTypeMapping[filterType] || filterType;
        //    //searchBox.placeholder = `Search by ${humanReadableName}`;
        //}

// Function to handle search submission using the anchor link
function submitSearch(event) {
    event.preventDefault(); // Prevent default anchor behavior

    const searchValue = document.getElementById('searchBox').value;

    // Ensure that the search value is not empty
    if (searchValue.trim() === '') {
        alert('Please enter a search term.');
        return;
    }

    // Build the URL for the search query using the current filter and search value
    const actionUrl = '@Url.Action("Index", "AuthorsMVC")' + `?searchType=${currentFilter}&searchValue=${encodeURIComponent(searchValue)}`;

    // Redirect to the constructed URL
    window.location.href = actionUrl;
}



        document.addEventListener('DOMContentLoaded', function() {
            // Optional: Update the filter links on page load
            filterByID();
            filterByFirstName();
            filterByLastName();
            filterByPhoneNo();
            filterByZip();
            filterByCity();
            filterByState();
        });


    </script>

     @*Font Awesome for icons*@ 
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

    @*Bootstraap icons*@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-icons/1.10.0/font/bootstrap-icons.min.css" />
    @*Font Awesome*@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
    <link rel="stylesheet" href="~/lib/font-awesome/css/all.min.css" />
    <link rel="stylesheet" href="~/lib/bootstrap-icons/font/bootstrap-icons.min.css" />


}
