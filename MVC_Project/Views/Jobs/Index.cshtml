@model IEnumerable<MVC_Project.Models.Job>

@{
    ViewBag.Title = "Index";
}

<style>
    .bg-dark {
        --bs-bg-opacity: 1;
        background-color: rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)) !important;
        margin-top: 10px;
    }
</style>


<h2 class="d-inline-block">Index</h2>

<div class="d-flex justify-content-end align-items-center mt-2 float-end">
    <div class="dropdown me-3">
        <div class="dropdown d-inline-block ">
            <button class="btn btn-secondary dropdown-toggle bg-dark" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                Filters
            </button>&nbsp;
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <li><a id="filterBy Job IDLink" class="dropdown-item" href="#" onclick="setFilter('id', event)">Search Jobs By JobID</a></li>
               @* <li><a id="filterBy Job DescLink" class="dropdown-item" href="#" onclick="setFilter('Job Desc', event)">Search Jobs By Job Desc</a></li>*@
                <li><a id="filterBy Min LevelLink" class="dropdown-item" href="#" onclick="setFilter('minlvl', event)">Search Jobs By Min Level</a></li>
                <li><a id="filterBy Max LevelLink" class="dropdown-item" href="#" onclick="setFilter('maxlvl', event)">Search Jobs By Max Level</a></li>
            </ul>
        </div>
        <div class="dropdown float-end">
            <div id="searchContainer" style="display: none; margin-top: 10px;">
                <input id="searchBox" type="text" name="searchValue" placeholder="Search" class="form-control" style="width: 200px; display: inline-block;" />
                <a href="#" id="searchLink" class="btn btn-primary" style="display: inline-block;" onclick="submitSearch(event)">Search</a>
            </div>


        </div>
    </div>
</div>
<p>
    @Html.ActionLink("+ Add New Job", "Create", null, new { @class = "btn btn-dark" })
</p>

<br />


<h2>Job</h2>

<div class="container">
    <div class="row">
        @foreach (var job in Model)
        {
            <div class="col-md-4 mb-3">
                <div class="card">
                    <div class="card-header">
                        @*@sale.ord_num*@
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Job ID: @job.job_id</h5>
                        <p class="card-text">
                            @*<strong>Job ID:</strong> @job.job_id <br />*@
                            @*<strong>Order No.:</strong> @sale.ord_num <br />*@
                            <strong>Job Description:</strong> @job.job_desc
                        </p>
                    </div>
                    <div class="card-footer text-muted">
                        <!-- Optional footer content, e.g., links -->
                        <a href="@Url.Action("Edit", new { id = job.job_id })" class="btn btn-primary">Edit</a>
                        <a href="@Url.Action("Details", new { id = job.job_id })" class="btn btn-info">Details</a>
                        <a href="@Url.Action("Delete", new { id = job.job_id })" class="btn btn-danger">Delete</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function updateLinkWithFilter(filterType) {
            var searchValue = document.getElementById('searchBox').value;
            var url = '@Url.Action("Index", "jobs")' + '?searchType=' + filterType + '&searchValue=' + encodeURIComponent(searchValue);
            return url;
        }

        function handleFormSubmit(event) {
            event.preventDefault(); // Prevent form submission
            var searchValue = document.getElementById('searchBox').value;
            var filterType = 'id'; /*document.getElementById('filterType').value;*/ // Assuming you use a hidden input to store the filter type
            var url = updateLinkWithFilter(filterType);
            window.location.href = url; // Redirect to the URL
            return false; // Prevent default form submission
        }

        function filterByJobID(event) {
            event.preventDefault();
            //var link = document.getElementById('filterByJobIDLink');
            //link.href = updateLinkWithFilter('id');
            window.location.href = updateLinkWithFilter('id') /*link.href*/;
        }


        function filterByMinLevel(event) {
            event.preventDefault();
            window.location.href = updateLinkWithFilter('minlvl');

        }
        function filterByMaxLevel(event) {
            event.preventDefault();
            window.location.href = updateLinkWithFilter('maxlvl');


        }


        let currentFilter = ''; // Variable to store the currently selected filter

// Function to set the selected filter and show the search box
function setFilter(filterType, event) {
    event.preventDefault(); // Prevent default anchor behavior

    // Store the selected filter type
    currentFilter = filterType;

    // Show the search box container
    const searchContainer = document.getElementById('searchContainer');
    searchContainer.style.display = 'block';

    // Update the search box placeholder based on the selected filter type
    const searchBox = document.getElementById('searchBox');
    searchBox.placeholder = `Search by ${filterType.charAt(0).toUpperCase() + filterType.slice(1)}`;
}

// Function to handle search submission using the anchor link
function submitSearch(event) {
    event.preventDefault(); // Prevent default anchor behavior

    const searchValue = document.getElementById('searchBox').value;

    // Ensure that the search value is not empty
    if (searchValue.trim() === '') {
        alert('Please enter a search term.');
        return;
    }

    // Build the URL for the search query using the current filter and search value
    const actionUrl = '@Url.Action("Index", "Jobs")' + `?searchType=${currentFilter}&searchValue=${encodeURIComponent(searchValue)}`;

    // Redirect to the constructed URL
    window.location.href = actionUrl;
}

        @*document.addEventListener('DOMContentLoaded', function() {
            // Optional: Update the filter links on page load
             var searchValue = '@ViewBag.SelectedValue';
            if (searchValue) {
                document.getElementById('searchBox').value = searchValue;
            }*@







    </script>
}
