@model IEnumerable<MVC_Project.Models.Publisher>

@{
    ViewBag.Title = "Index";
}
<style>
    .bg-dark {
        --bs-bg-opacity: 1;
        background-color: rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)) !important;
        margin-top: 10px;
    }
</style>

<h2 class="d-inline-block">Index</h2>

<div class="d-flex justify-content-end align-items-center mt-2 float-end">
    <div class="dropdown me-3">
        <div class="dropdown d-inline-block ">
            <button class="btn btn-secondary dropdown-toggle bg-dark" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                Filters
            </button>&nbsp;
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                <li><a id="filterByNameLink" class="dropdown-item" href="#" onclick="setFilter('name', event)">Search Publishers By Name</a></li>
                <li><a id="filterByCityLink" class="dropdown-item" href="#" onclick="setFilter('city', event)">Search Publishers By City</a></li>
                <li><a id="filterByCountryLink" class="dropdown-item" href="#" onclick="setFilter('country', event)">Search Publishers By Country</a></li>
                <li><a id="filterByStateLink" class="dropdown-item" href="#" onclick="setFilter('state', event)">Search Publishers By State</a></li>
            </ul>
        </div>
        <div class="dropdown float-end">
            <div id="searchContainer" style="display: none; margin-top: 10px;">
                <input id="searchBox" type="text" name="searchValue" placeholder="Search" class="form-control" style="width: 200px; display: inline-block;" />
                <a href="#" id="searchLink" class="btn btn-primary" style="display: inline-block;" onclick="submitSearch(event)">Search</a>
            </div>
        </div>
    </div>
</div>

<br />
<p>
    @Html.ActionLink("Add New Publisher", "Create", null, new { @class = "btn btn-dark" })
    <!-- Add link to Show Requests here -->
    @Html.ActionLink("Show Requests", "ShowRequests", "PublisherMVC", new { @class = "btn btn-info ms-2" })
</p>

<br />
<h3>Publishers</h3>
<br />
<div class="container">
    <div class="row">
        @foreach (var publisher in Model)
        {
            <div class="col-md-4 mb-4" data-aos="fade-up">
                <div class="card text-dark">
                    <div class="card-header">
                        <strong>Publisher Name</strong>: @publisher.pub_name
                    </div>
                    <div class="card-body">
                        <h5 class="card-title">Publisher ID: @publisher.pub_id</h5>
                        <p class="card-text">
                            <strong>City:</strong> @publisher.city <br />
                            <strong>State:</strong> @publisher.state <br />
                            <strong>Country:</strong> @publisher.country
                        </p>
                    </div>
                    <div class="card-footer text-muted">
                        <a href="@Url.Action("Edit", new { id = publisher.pub_id })" class="btn btn-primary">Edit</a>
                        <a href="@Url.Action("Details", new { id = publisher.pub_id })" class="btn btn-info">Details</a>
                        <a href="@Url.Action("Delete", new { id = publisher.pub_id })" class="btn btn-danger">Delete</a>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    <script>
        function updateLinkWithFilter(filterType) {
            var searchValue = document.getElementById('searchBox').value;
            var url = '@Url.Action("Index", "PublisherMVC")' + '?searchType=' + filterType + '&searchValue=' + encodeURIComponent(searchValue);
            return url;
        }

        function handleFormSubmit(event) {
            event.preventDefault(); // Prevent form submission
            var searchValue = document.getElementById('searchBox').value;
            var filterType = document.getElementById('filterType').value; // Assuming you use a hidden input to store the filter type
            var url = updateLinkWithFilter(filterType);
            window.location.href = url; // Redirect to the URL
            return false; // Prevent default form submission
        }

        function filterByName(event) {
            event.preventDefault();
            var link = document.getElementById('filterByNameLink');
            link.href = updateLinkWithFilter('name');
            window.location.href = link.href;
        }

        function filterByCity(event) {
            event.preventDefault();
            var link = document.getElementById('filterByCityLink');
            link.href = updateLinkWithFilter('city');
            window.location.href = link.href;
        }

        function filterByCountry(event) {
            event.preventDefault();
            var link = document.getElementById('filterByCountryLink');
            link.href = updateLinkWithFilter('country');
            window.location.href = link.href;
        }

        function filterByState(event) {
            event.preventDefault();
            var link = document.getElementById('filterByStateLink');
            link.href = updateLinkWithFilter('state');
            window.location.href = link.href;
        }

        let currentFilter = ''; // Variable to store the currently selected filter

        function setFilter(filterType, event) {
            event.preventDefault(); // Prevent default anchor behavior

            // Store the selected filter type
            currentFilter = filterType;

            // Show the search box container
            const searchContainer = document.getElementById('searchContainer');
            searchContainer.style.display = 'block';

            // Update the search box placeholder based on the selected filter type
            const searchBox = document.getElementById('searchBox');
            searchBox.placeholder = `Search by ${filterType.charAt(0).toUpperCase() + filterType.slice(1)}`;
        }

        function submitSearch(event) {
            event.preventDefault(); // Prevent default anchor behavior

            const searchValue = document.getElementById('searchBox').value;

            // Ensure that the search value is not empty
            if (searchValue.trim() === '') {
                alert('Please enter a search term.');
                return;
            }

            // Build the URL for the search query using the current filter and search value
            const actionUrl = '@Url.Action("Index", "PublisherMVC")' + `?searchType=${currentFilter}&searchValue=${encodeURIComponent(searchValue)}`;

            // Redirect to the constructed URL
            window.location.href = actionUrl;
        }
    </script>
}
