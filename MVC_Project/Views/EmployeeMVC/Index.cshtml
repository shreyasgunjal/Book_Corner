@model IEnumerable<MVC_Project.Models.Employee>

@{
    ViewBag.Title = "Index";
}
<style>
    .bg-dark {
        --bs-bg-opacity: 1;
        background-color: rgba(var(--bs-dark-rgb), var(--bs-bg-opacity)) !important;
        margin-top: 10px;
    }
</style>


<h2 class="d-inline-block">Index</h2>

<div class="d-flex justify-content-end align-items-center mt-2 float-end">
    <div class="dropdown me-3">
        <div class="dropdown d-inline-block ">
            <button class="btn btn-secondary dropdown-toggle bg-dark" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
                Filters
            </button>&nbsp;
            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                @*<li><a id="filterByEmpIDLink" class="dropdown-item" href="#" onclick="setFilter('emp_id', event)">Search Employees By Emp ID</a></li>*@
                <li><a id="filterByPubIDLink" class="dropdown-item" href="#" onclick="setFilter('pubid', event)">Search Employees By Pub ID</a></li>
                <li><a id="filterByFirstNameLink" class="dropdown-item" href="#" onclick="setFilter('fname', event)">Search Employees By First Name</a></li>
                <li><a id="filterByLastNameLink" class="dropdown-item" href="#" onclick="setFilter('lname', event)">Search Employees By Last Name</a></li>
                <li><a id="filterByHireDateLink" class="dropdown-item" href="#" onclick="setFilter('hiredate', event)">Search Employees By Hire Date</a></li>
            </ul>
        </div>
        <div class="dropdown float-end">
            <div id="searchContainer" style="display: none; margin-top: 10px;">
                <input id="searchBox" type="text" name="searchValue" placeholder="Search" class="form-control" style="width: 200px; display: inline-block;" />
                <a href="#" id="searchLink" class="btn btn-primary" style="display: inline-block;" onclick="submitSearch(event)">Search</a>
            </div>


        </div>
    </div>
</div>


<p>
    @Html.ActionLink("Add New Employee", "Create", null, new { @class = "btn btn-dark" })
</p>



<div class="row mt-4">
    @*@if (Model != null && Model.Any())
        {*@
    @foreach (var employee in Model)
    {
        <div class="col-md-4 mb-3">
            <div class="card">
                <div class="card-header">
                    <strong>Employee ID : </strong>@employee.emp_id
                </div>
                <div class="card-body">
                    @*<h5 class="card-employee">Employee ID: @item.emp_id</h5>*@
                    <p class="card-text">
                        <strong>First Name:</strong> @employee.fname <br />
                        <strong>Minit:</strong> @employee.minit <br />
                        <strong>Last Name:</strong> @employee.lname <br />
                        <strong>Job ID:</strong> @employee.job_id <br />
                        <strong>Job LVL:</strong> @employee.job_lvl <br />
                        <strong>Pub ID:</strong> @employee.pub_id <br />
                        <strong>Hire Date:</strong> @employee.hire_date.ToString("MM/dd/yyyy")

                    </p>
                </div>

                <div class="card-footer text-muted">
                    <!-- Optional footer content, e.g., links -->
                    <a href="@Url.Action("Edit", new { id = employee.emp_id})" class="btn btn-primary">Edit</a>
                    <a href="@Url.Action("Details", new { id = employee.emp_id})" class="btn btn-info">Details</a>
                    <a href="@Url.Action("Delete", new { id = employee.emp_id})" class="btn btn-danger">Delete</a>
                </div>

            </div>
        </div> 

    }

    </div>

    @section Scripts {
        <script>
        function updateLinkWithFilter(filterType) {
            var searchValue = document.getElementById('searchBox').value;
            var url = '@Url.Action("Index", "EmployeeMVC")' + '?searchType=' + filterType + '&searchValue=' + encodeURIComponent(searchValue);
            return url;
        }

        function handleFormSubmit(event) {
            event.preventDefault(); // Prevent form submission
            var searchValue = document.getElementById('searchBox').value;
            var filterType = document.getElementById('filterType').value; // Assuming you use a hidden input to store the filter type
            var url = updateLinkWithFilter(filterType);
            window.location.href = url; // Redirect to the URL
            return false; // Prevent default form submission
        }

        function filterByEmpID(event) {
            event.preventDefault();
            var link = document.getElementById('filterByEmpIDLink');
            link.href = updateLinkWithFilter('emp_id');
            window.location.href = link.href;
        }

        function filterByPubID(event) {
            event.preventDefault();
            var link = document.getElementById('filterByPubIDLink');
            link.href = updateLinkWithFilter('pubid');
            window.location.href = link.href;
        }

        function filterByFirstName(event) {
            event.preventDefault();
            var link = document.getElementById('filterByFirstNameLink');
            link.href = updateLinkWithFilter('fname');
            window.location.href = link.href;
        }

        function filterByLastName(event) {
            event.preventDefault();
            var link = document.getElementById('filterByLastNameLink');
            link.href = updateLinkWithFilter('lname');
            window.location.href = link.href;
        }
        
            function filterByHireDate(event) {
    event.preventDefault();

    // Get the search value (hire date) from the search input
    var searchValue = document.getElementById('searchBox').value;

    // Parse the date in the "MM-dd-yyyy" format and convert to "yyyy-MM-dd"
    var dateParts = searchValue.split('-');
    if (dateParts.length === 3) {
        var formattedDate = `${dateParts[2]}-${dateParts[0]}-${dateParts[1]}`; // Convert "MM-dd-yyyy" to "yyyy-MM-dd"
    } else {
        alert("Please enter a valid date in the format MM-dd-yyyy.");
        return;
    }

    // URL encode the formatted date
    var encodedDate = encodeURIComponent(formattedDate);

    // Construct the URL with searchType and searchValue parameters
    var newUrl = `/EmployeeMVC?searchType=hiredate&searchValue=${encodedDate}`;

    // Log the new URL for debugging
    console.log("Navigating to:", newUrl);

    // Redirect to the new URL
    window.location.href = newUrl;
}



function setFilter(filterType, event) {
    event.preventDefault(); // Prevent default anchor behavior

    // Store the selected filter type
    currentFilter = filterType;

    // Show the search box container
    const searchContainer = document.getElementById('searchContainer');
    searchContainer.style.display = 'block';

    // Update the search box placeholder based on the selected filter type
    const searchBox = document.getElementById('searchBox');
    searchBox.placeholder = `Search by ${filterType.charAt(0).toUpperCase() + filterType.slice(1)}`;
}

// Function to handle search submission using the anchor link
function submitSearch(event) {
    event.preventDefault(); // Prevent default anchor behavior

    const searchValue = document.getElementById('searchBox').value;

    // Ensure that the search value is not empty
    if (searchValue.trim() === '') {
        alert('Please enter a search term.');
        return;
    }

    // Build the URL for the search query using the current filter and search value
    const actionUrl = '@Url.Action("Index", "EmployeeMVC")' + `?searchType=${currentFilter}&searchValue=${encodeURIComponent(searchValue)}`;

    // Redirect to the constructed URL
    window.location.href = actionUrl;
}

        </script>
    }


